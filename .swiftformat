
## Исключаем из проверки директорию подов и локализации с картинками
--exclude Pods
--exclude DerivedData
--exclude SMEMBOrigination/R.generated.swift
--exclude SMEMBOrigination-UI-Tests

## Определяем версию swift
--swiftversion 5.0



## Применяемые правила



## Заменяем && на запятую внутри if, guard, while
--enable andOperator

## Заменяем class на AnyObject при объявлении протокола
--enable anyObjectProtocol

## Убираем пустую строчку в конце объявления (например, массива или функции)
--enable blankLinesAtEndOfScope

## Добавляем пустую строку перед class, struct, enum, extension, protocol, function
--enable blankLinesBetweenScopes

## Убираем лишние пробелы
--enable consecutiveSpaces

## Убираем дублирующиеся импорты
--enable duplicateImports

## Убираем все между пустых скобок
--enable emptyBraces

## Заменяем проверку count == 0 на isEmpty
--enable isEmpty

## Перемещаем разделитель : или ; или , с начала новой линии на конец предыдущей
--enable leadingDelimiters

## Обеспечиваем пустую строчку в конце файла
--enable linebreakAtEndOfFile

## Убираем лишние `` в случае если это не ключевое слово
--enable redundantBackticks

## Убираем лишние break из switch
--enable redundantBreak

## Убираем дублирующий параметра контроля доступа при объявлении расширения с параметром доступа
--enable redundantExtensionACL

## Убираем ненужный get {} у read-only свойства
--enable redundantGet

## Заменяем инициализацию с помощью .init() на ()
--enable redundantInit

## Убираем let / var перед игнорируемой переменной _
--enable redundantLet

## Убираем let error из catch, когда это не нужно
--enable redundantLetError

## Убираем лишнюю инициализацию nil-ом при объявлении свойства опциональным
--enable redundantNilInit

## Убираем лишнее объявление с @objc ключевым словом
--enable redundantObjc

## Убираем лишние круглые скобки, где не обязательно
--enable redundantParens

## Заменяем игнорируемый паттерн (_,_) на _
--enable redundantPattern

## Убираем лишние объявления строк в enum: String при совпадении с именем кейса
--enable redundantRawValues

## Убираем ненужный возвращаемый тип Void из объявления функции
--enable redundantVoidReturnType

## Убираем/добавляем пробелы около { }
--enable spaceAroundBraces

## Убираем/добавляем пробелы около [ ]
--enable spaceAroundBrackets

## Добавляем пробел около комментов
--enable spaceAroundComments

## Убираем пробел около дженерика < >
--enable spaceAroundGenerics

## Добавляет/удаляет пробел около ( )
--enable spaceAroundParens

## Добавляет пробел внутри { }
--enable spaceInsideBraces

## Удаляет пробел внутри [ ]
--enable spaceInsideBrackets

## Добавляем пробел/ы внутри комментариев (перед и после если нужно)
--enable spaceInsideComments

## Убираем лишние пробелы внутри дженериков < >
--enable spaceInsideGenerics

## Убираем лишние пробелы внутри ( )
--enable spaceInsideParens

## Заменяем `self` на self при guard let `self` = self для weak self references
--enable strongifiedSelf

## Исправляем если надо, чтобы видел Xcode
--enable todos

## Применяем синтаксический сахар где можно
--enable typeSugar

## Убирает в начало объявления let и var внутри скоупа, например (let foo, let bar) = baz() на let (foo, bar) = baz()
--patternlet inline

## Левый отступ по tab (альтернативно, число пробелов)
--indent 4

## Оставляем self только в init, для автозамыканий нужно определить selfrequired
--self init-only

## Не добавляем запятую после последнего элемента в массиве
--commas inline

## Заменяем неиспользуемые переменные только в замыканиях
--stripunusedargs closure-only



## Отключенные правила



## Отключаем удаление пустой линии вначале внутри {}, [], ()
--disable blankLinesAtStartOfScope

## Отключаем удаление weak спецификатора из @IBOutlet свойств
--disable strongOutlets

## Отключаем конвертацию последнего аргумента замыкания в вызов замыкания
--disable trailingClosures

## Убираем лишние пустые строчки (остается одна)
--disable consecutiveBlankLines

## Убираем ненужный return из однострочных замыканий
--disable redundantReturn

## Нормализует порядок спецификаторов для свойств, классов, функций (public, weak, lazy и т.д.)
--disable modifierOrder

## Начинаем с новой строки открывающую скобку многострочных операторов
--disable wrapMultilineStatementBraces

## Преобразуем статические типы в перечисления
--disable enumNamespaces

## Удаляем лишние пробелы в конце строки
--trimwhitespace nonblank-lines

